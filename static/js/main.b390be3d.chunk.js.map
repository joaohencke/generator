{"version":3,"sources":["services/copySelection.js","components/generator/card.js","containers/generator/card.js","components/generator/index.js","containers/generator/index.js","components/root.js","services/generators.js","containers/root.js","serviceWorker.js","index.js"],"names":["module","exports","str","el","document","createElement","value","setAttribute","style","position","left","body","appendChild","selected","getSelection","rangeCount","getRangeAt","select","execCommand","removeChild","removeAllRanges","addRange","GeneratorCard","_ref","generator","state","key","handleChange","copy","generate","validate","react_default","a","className","title","type","placeholder","name","onChange","disabled","onClick","options","is","id","selectedOption","map","val","mask","_useState","useState","_useState2","Object","slicedToArray","setState","GeneratorCardComponent","e","preventDefault","console","log","x","objectSpread","target","isCheckbox","checked","defineProperty","formatter","copySelection","GeneratorList","generators","index","generatorsData","GeneratorListComponent","Root","generatorsList","containers_generator","services_generators","cpf","cnpj","creditCard","keys","schemas","RootComponent","Boolean","window","location","hostname","match","ReactDOM","render","containers_root","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0EAAAA,EAAOC,QAAU,SAAAC,GACf,IAAMC,EAAKC,SAASC,cAAc,YAClCF,EAAGG,MAAQJ,EACXC,EAAGI,aAAa,WAAY,IAC5BJ,EAAGK,MAAMC,SAAW,WACpBN,EAAGK,MAAME,KAAO,UAChBN,SAASO,KAAKC,YAAYT,GAC1B,IAAMU,EACJT,SAASU,eAAeC,WAAa,GACjCX,SAASU,eAAeE,WAAW,GAEzCb,EAAGc,SACHb,SAASc,YAAY,QACrBd,SAASO,KAAKQ,YAAYhB,GACtBU,IACFT,SAASU,eAAeM,kBACxBhB,SAASU,eAAeO,SAASR,kJCkFtBS,EA/FO,SAAAC,GAAA,IACpBC,EADoBD,EACpBC,UACAC,EAFoBF,EAEpBE,MACAC,EAHoBH,EAGpBG,IACAC,EAJoBJ,EAIpBI,aACAC,EALoBL,EAKpBK,KACAC,EANoBN,EAMpBM,SACAC,EAPoBP,EAOpBO,SAPoB,OASpBC,EAAAC,EAAA3B,cAAA,OAAK4B,UAAU,MAAMP,IAAKA,GACxBK,EAAAC,EAAA3B,cAAA,QAAM4B,UAAU,QACdF,EAAAC,EAAA3B,cAAA,OAAK4B,UAAU,eACbF,EAAAC,EAAA3B,cAAA,OAAK4B,UAAU,eACbF,EAAAC,EAAA3B,cAAA,MAAI4B,UAAU,cAAcT,EAAUU,QAExCH,EAAAC,EAAA3B,cAAA,OAAK4B,UAAU,aACbF,EAAAC,EAAA3B,cAAA,OAAK4B,UAAU,cACbF,EAAAC,EAAA3B,cAAA,OAAK4B,UAAU,eACbF,EAAAC,EAAA3B,cAAA,SACE8B,KAAK,OACLF,UAAU,eACVG,YAAY,gBACZ9B,MAAOmB,EAAMnB,MACb+B,KAAK,QACLC,SAAUX,IAEZI,EAAAC,EAAA3B,cAAA,OAAK4B,UAAU,sBACbF,EAAAC,EAAA3B,cAAA,UACE4B,UAAU,kBACVE,KAAK,SACLI,UAAWd,EAAMnB,MACjBkC,QAAS,kBAAMZ,EAAKH,EAAMnB,SAE1ByB,EAAAC,EAAA3B,cAAA,KAAG4B,UAAU,mBAKpBR,EAAMgB,SAAWC,aAAG,QAASjB,EAAMgB,UAClCV,EAAAC,EAAA3B,cAAA,OAAK4B,UAAU,cACbF,EAAAC,EAAA3B,cAAA,UACEgC,KAAK,iBACLM,GAAG,UACHrC,MAAOmB,EAAMmB,eACbX,UAAU,eACVK,SAAUX,GAETF,EAAMgB,QAAQI,IAAI,SAAAC,GAAG,OACpBf,EAAAC,EAAA3B,cAAA,UAAQqB,IAAKoB,EAAKxC,MAAOwC,GACtBA,OAMVtB,EAAUuB,MACThB,EAAAC,EAAA3B,cAAA,OAAK4B,UAAU,cACbF,EAAAC,EAAA3B,cAAA,SAAO4B,UAAU,oBACfF,EAAAC,EAAA3B,cAAA,SACE8B,KAAK,WACLF,UAAU,mBACVK,SAAUX,EACVgB,GAAG,UACHN,KAAK,YANT,gBAaNN,EAAAC,EAAA3B,cAAA,OAAK4B,UAAU,eACZT,EAAUK,UACTE,EAAAC,EAAA3B,cAAA,UACE8B,KAAK,SACLF,UAAU,yBACVO,QAASX,GAHX,SAQDL,EAAUM,UACTC,EAAAC,EAAA3B,cAAA,UACE8B,KAAK,SACLF,UAAU,2BACVO,QAASV,GAHX,iCClCGR,MA7Cf,SAAAC,GAAoD,IAA3BG,EAA2BH,EAA3BG,IAAKF,EAAsBD,EAAtBC,UAAWiB,EAAWlB,EAAXkB,QAAWO,EACxBC,mBAAS,CACjC3C,MAAO,GACPmC,QAASA,GAAW,GACpBG,eAAgBH,GAAWA,EAAQ,KAJaS,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAC3CvB,EAD2CyB,EAAA,GACpCG,EADoCH,EAAA,GAkClD,OAAOI,EAAuB,CAC5B5B,MACAF,YACAM,SALe,aAMfL,QACAI,SAbe,SAAA0B,GACfA,EAAEC,iBACFC,QAAQC,IAAIjC,GACZ4B,EAAS,SAAAM,GAAC,OAAAR,OAAAS,EAAA,EAAAT,CAAA,GAAUQ,EAAV,CAAarD,MAAOkB,EAAUK,SAAS8B,EAAEf,gBAAkBe,EAAElB,cAWvEd,aAjCmB,SAAA4B,GACnB,IAAMM,EAASN,EAAEM,OACXC,EAA6B,aAAhBD,EAAO1B,KACpB7B,EAAQwD,EAAaD,EAAOE,QAAUF,EAAOvD,MAC7C+B,EAAOwB,EAAOxB,KAEpBgB,EAAS,SAAAM,GACP,OAAOR,OAAAS,EAAA,EAAAT,CAAA,GACFQ,EADLR,OAAAa,EAAA,EAAAb,CAAA,GAEGd,EAAO/B,MAIRwD,GAActC,EAAUuB,MAC1BM,EAAS,SAAAM,GAAC,OAAAR,OAAAS,EAAA,EAAAT,CAAA,GAAUQ,EAAV,CAAarD,MAAOkB,EAAUK,SAASoC,UAAUN,EAAErD,YAoB/DsB,KAjBW,SAAA1B,GAAG,OAAIgE,IAAchE,OCfrBiE,EAXO,SAAA5C,GAAA,IAAG6C,EAAH7C,EAAG6C,WAAH,OACpBrC,EAAAC,EAAA3B,cAAA,OAAK4B,UAAU,OACZmC,EAAWvB,IAAI,SAACrB,EAAW6C,GAAZ,OACd/C,EAAc,CACZE,YACAiB,QAASjB,EAAUiB,SAAWjB,EAAUiB,UACxCf,IAAK2C,QCDEF,MALf,SAAA5C,GAAuD,IAAlB+C,EAAkB/C,EAA9B6C,WAA8BpB,EAChCC,mBAASqB,GAAvBF,EAD8CjB,OAAAC,EAAA,EAAAD,CAAAH,EAAA,MAErD,OAAOuB,EAAuB,CAAEH,gBCInBI,EANF,SAAAjD,GAAA,IAAGkD,EAAHlD,EAAGkD,eAAH,OACX1C,EAAAC,EAAA3B,cAAA,OAAK4B,UAAU,aACbF,EAAAC,EAAA3B,cAACqE,EAAD,CAAeN,WAAYK,aCHhBE,EAAA,CACb,CACEzC,MAAO,iBACPL,SAAUL,YAAUoD,IACpB7B,MAAM,GAER,CACEb,MAAO,kBACPL,SAAUL,YAAUqD,KACpB9B,MAAM,GAER,CACEb,MAAO,qCACPL,SAAUL,YAAUsD,WACpBrC,QAHF,WAII,OAAOU,OAAO4B,KAAKvD,YAAUsD,WAAWE,YCT/BR,MAJf,WACE,OAAOS,EAAc,CAAER,0BCOLS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzD,EAAAC,EAAA3B,cAACoF,EAAD,MAAUrF,SAASsF,eAAe,SD2H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b390be3d.chunk.js","sourcesContent":["module.exports = str => {\n  const el = document.createElement(\"textarea\");\n  el.value = str;\n  el.setAttribute(\"readonly\", \"\");\n  el.style.position = \"absolute\";\n  el.style.left = \"-9999px\";\n  document.body.appendChild(el);\n  const selected =\n    document.getSelection().rangeCount > 0\n      ? document.getSelection().getRangeAt(0)\n      : false;\n  el.select();\n  document.execCommand(\"copy\");\n  document.body.removeChild(el);\n  if (selected) {\n    document.getSelection().removeAllRanges();\n    document.getSelection().addRange(selected);\n  }\n};\n","import React from \"react\";\nimport { is } from \"@joao.hencke/utils/lib/object\";\n\nconst GeneratorCard = ({\n  generator,\n  state,\n  key,\n  handleChange,\n  copy,\n  generate,\n  validate\n}) => (\n  <div className=\"col\" key={key}>\n    <form className=\"form\">\n      <div className=\"text-center\">\n        <div className=\"card-header\">\n          <h5 className=\"card-title\">{generator.title}</h5>\n        </div>\n        <div className=\"card-body\">\n          <div className=\"form-group\">\n            <div className=\"input-group\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"Gerar/Validar\"\n                value={state.value}\n                name=\"value\"\n                onChange={handleChange}\n              />\n              <div className=\"input-group-append\">\n                <button\n                  className=\"btn-sm btn-info\"\n                  type=\"button\"\n                  disabled={!state.value}\n                  onClick={() => copy(state.value)}\n                >\n                  <i className=\"fa fa-copy\" />\n                </button>\n              </div>\n            </div>\n          </div>\n          {state.options && is(\"array\", state.options) && (\n            <div className=\"form-group\">\n              <select\n                name=\"selectedOption\"\n                id=\"options\"\n                value={state.selectedOption}\n                className=\"form-control\"\n                onChange={handleChange}\n              >\n                {state.options.map(val => (\n                  <option key={val} value={val}>\n                    {val}\n                  </option>\n                ))}\n              </select>\n            </div>\n          )}\n          {generator.mask && (\n            <div className=\"form-check\">\n              <label className=\"form-check-label\">\n                <input\n                  type=\"checkbox\"\n                  className=\"form-check-input\"\n                  onChange={handleChange}\n                  id=\"options\"\n                  name=\"options\"\n                />\n                MÃ¡scara\n              </label>\n            </div>\n          )}\n        </div>\n        <div className=\"card-footer\">\n          {generator.generate && (\n            <button\n              type=\"button\"\n              className=\"btn btn-md btn-primary\"\n              onClick={generate}\n            >\n              Gerar\n            </button>\n          )}\n          {generator.validate && (\n            <button\n              type=\"button\"\n              className=\"btn btn-md btn-secondary\"\n              onClick={validate}\n            >\n              Validar\n            </button>\n          )}\n        </div>\n      </div>\n    </form>\n  </div>\n);\n\nexport default GeneratorCard;\n","import { useState } from \"react\";\nimport { is } from \"@joao.hencke/utils/lib/object\";\nimport GeneratorCardComponent from \"../../components/generator/card\";\nimport copySelection from \"../../services/copySelection\";\n\nfunction GeneratorCard({ key, generator, options }) {\n  const [state, setState] = useState({\n    value: \"\",\n    options: options || \"\",\n    selectedOption: options && options[0]\n  });\n\n  const handleChange = e => {\n    const target = e.target;\n    const isCheckbox = target.type === \"checkbox\";\n    const value = isCheckbox ? target.checked : target.value;\n    const name = target.name;\n\n    setState(x => {\n      return {\n        ...x,\n        [name]: value\n      };\n    });\n\n    if (isCheckbox && generator.mask)\n      setState(x => ({ ...x, value: generator.generate.formatter(x.value) }));\n  };\n\n  const copy = str => copySelection(str);\n\n  const generate = e => {\n    e.preventDefault();\n    console.log(state);\n    setState(x => ({ ...x, value: generator.generate(x.selectedOption || x.options) }));\n  };\n\n  const validate = () => {};\n\n  return GeneratorCardComponent({\n    key,\n    generator,\n    validate,\n    state,\n    generate,\n    handleChange,\n    copy\n  });\n}\n\nexport default GeneratorCard;\n","import React from \"react\";\nimport GeneratorCard from \"../../containers/generator/card\";\n\nconst GeneratorList = ({ generators }) => (\n  <div className=\"row\">\n    {generators.map((generator, index) =>\n      GeneratorCard({\n        generator,\n        options: generator.options && generator.options(),\n        key: index\n      })\n    )}\n  </div>\n);\nexport default GeneratorList;\n","import { useState } from \"react\";\nimport GeneratorListComponent from \"../../components/generator\";\n\nfunction GeneratorList({ generators: generatorsData }) {\n  const [generators] = useState(generatorsData);\n  return GeneratorListComponent({ generators });\n}\n\nexport default GeneratorList;\n","import React from \"react\";\nimport GeneratorList from \"../containers/generator\";\n\nconst Root = ({ generatorsList }) => (\n  <div className=\"container\">\n    <GeneratorList generators={generatorsList} />\n  </div>\n);\n\nexport default Root;\n","import { generator } from \"@joao.hencke/utils\";\n\nexport default [\n  {\n    title: \"Gerador de CPF\",\n    generate: generator.cpf,\n    mask: true\n  },\n  {\n    title: \"Gerador de CNPJ\",\n    generate: generator.cnpj,\n    mask: true\n  },\n  {\n    title: \"Gerador de CartÃ£o de CrÃ©dito\",\n    generate: generator.creditCard,\n    options() {\n      return Object.keys(generator.creditCard.schemas);\n    }\n  }\n];\n","import RootComponent from \"../components/root\";\n\nimport generatorsList from \"../services/generators\";\n\nfunction Root() {\n  return RootComponent({ generatorsList });\n}\n\nexport default Root;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Root from \"./containers/root\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Root />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}